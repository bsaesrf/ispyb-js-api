/**
 * Super class for all the data adapters
 * Based on $ and Event it will make a GET/POST call to an given URL
 * if success then onSuccess will be notified otherwise on Error will be notified
 * 
 * Example:
 * 
 * function successed (sender, data){
 * 	alert("It worked");
 * }
 * var adapter = new DataAdapter({async : true, onSuccess: successed }).get("http://example.com/get")
 * 
 * 
**/
function DataAdapter( args) {
	this.async = true;
	this.url = null;
	this.token = null;
	this.proposal = null;
	this.username = null;
	
	this.onSuccess = new Event(this);
	this.onError = new Event(this);
	
	
	if (args != null) {
		if (args.username != null) {
			this.username = args.username;
		}
		if (args.async != null) {
			this.async = args.async;
		}
		if (args.onSuccess != null) {
			this.onSuccess.attach(args.onSuccess);
		}
		if (args.onError != null) {
			this.onError.attach(args.onError);
		}
		if (args.url != null) {
			this.url = args.url;
		}
		if (args.token != null) {
			this.token = args.token;
		}
		if (args.proposal != null) {
			this.proposal = args.proposal;
		}
	}
	
}

/**
 * Input: url = "http://server.com/{token}/proposal/{proposal}/shipment/list"
 * Output will be the url with the strings {token} and {proposal} replaced by the values connection.token and connection.proposal
 */
DataAdapter.prototype.getUrl = function(url){
	return this.url + url.replace("{token}", this.token).replace("{proposal}", this.proposal).replace("{username}", this.username);
};

DataAdapter.prototype.get = function(url){
	var _this = this;

		$.ajax({
			  url: this.getUrl( url),
			  type: 'get',
			  async : this.async,
			  statusCode: {
		            404 : function(){
		            	_this.onError.notify('404 : not found');
		            },
		            415 : function(){
		                _this.onError.notify('415 : type not allowed');
		            },
		            500 : function(){
		                _this.onError.notify('500 : internal server error');
		            }
		        },
			  success: function(data){ 
				 
				  _this.onSuccess.notify(data);
			  },
			  error: function(error){

				  _this.onError.notify(error);
				   
			  }
			});
};

DataAdapter.prototype.post = function(url, data){
	var _this = this;
	
	 url = this.getUrl(url);
	 $.ajax({
		  type: "POST",
		  async : this.async,
		  url: url,
		  data: data,
		  success: function(data){ 
			  _this.onSuccess.notify(data);
			 
		  },
		  error: function(error){
			  _this.onError.notify(error);
			 
		  }
	});
	 
};



/*
 * var Event = function (sender) { this._sender = sender; this._listeners = []; };
 */

function Event(sender) {
	this._sender = sender;
	this._listeners = [];
}

Event.prototype = {
	attach : function(listener) {
		this._listeners.push(listener);
	},
	notify : function(args) {
		for (var i = 0; i < this._listeners.length; i++) {
			this._listeners[i](this._sender, args);
		}
	}

};

function ExiDataAdapter(args){
	this.async = true;
	this.onSuccess = new Event(this);
	this.onError = new Event(this);
	
	if (args != null) {
		if (args.async != null) {
			this.async = args.async;
		}
		if (args.onSuccess != null) {
			this.onSuccess.attach(args.onSuccess);
		}
		if (args.onError != null) {
			this.onError.attach(args.onError);
		}
	}

}

ExiDataAdapter.prototype.getUrl = function(url){
	var connection = EXI.credentialManager.getConnections()[0];
	return connection.exiUrl + url.replace("{token}", connection.token).replace("{username}", connection.username);
};


ExiDataAdapter.prototype.call = function(url){
	var _this = this;
//	var connections = EXI.credentialManager.getConnections();

	$.ajax({
		  url: this.getUrl(url),
		  type: 'get',
		  success: function(data){ 
			  _this.onSuccess.notify(data);
			  if (exiSAXS != null){
				  exiSAXS.setLoading(false);
			  }
		  },
		  error: function(error){
			  _this.onError.notify(error);
			  if (exiSAXS != null){
				  exiSAXS.setError(error);
			  }
		  }
	});

};

ExiDataAdapter.prototype.postcall = function(url, data){
	var _this = this;
	var connections = EXI.credentialManager.getConnections();
	
	$.ajax({
		  url: connections[0].exiUrl + url,
		  type: 'post',
		  data : data,
		  success: function(data){ 
			  _this.onSuccess.notify(data);
			  if (exiSAXS != null){
				  exiSAXS.setLoading(false);
			  }
		  },
		  error: function(error){
			  _this.onError.notify(error);
			  if (exiSAXS != null){
				  exiSAXS.setError(error);
			  }
		  }
	});

};

ExiDataAdapter.prototype.getToolUrl = function(){
	return this.getUrl('/{token}/tool');
};

ExiDataAdapter.prototype.authenticate = function(){
	this.call('/{token}/user/{username}/authenticate');
};

ExiDataAdapter.prototype.getProject = function(){
	this.call('/{token}/project/list');
};

ExiDataAdapter.prototype.getRuns = function(projectId){
	this.call('/{token}/project/{0}/run/list'.format([ projectId]));
};

ExiDataAdapter.prototype.save = function(user){
	this.postcall('/{token}/user/save'.format([ tokens[0].token]), {user : JSON.stringify(user)});
};

ExiDataAdapter.prototype.getFileContent = function(fileId){
	this.call('/file/{0}/content'.format([ fileId]));
};

ExiDataAdapter.prototype.getFileImage = function(fileId){
	return this.getUrl('/file/{0}/image'.format([ fileId]));
};


function ExiDataAdapterGroup(args){
	this.offline = new ExiDataAdapter(args);
}



function AutoProcIntegrationDataAdapter(args){
	DataAdapter.call(this, args);
}

AutoProcIntegrationDataAdapter.prototype.get = DataAdapter.prototype.get;
AutoProcIntegrationDataAdapter.prototype.post = DataAdapter.prototype.post;
AutoProcIntegrationDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

AutoProcIntegrationDataAdapter.prototype.getByDataCollectionId= function(dataCollectionId){
	this.get('/{token}/proposal/{proposal}/mx/autoprocintegration/datacollection/{0}/list'.format( [dataCollectionId]));
};


AutoProcIntegrationDataAdapter.prototype.getXScaleCompleteness= function(autoProcIntegrationIdList){
	return this.getUrl('/{token}/proposal/{proposal}/mx/autoprocintegration/{0}/xscale/completeness'.format( [autoProcIntegrationIdList.toString()]));
};

AutoProcIntegrationDataAdapter.prototype.getXScaleRfactor= function(autoProcIntegrationIdList){
	return this.getUrl('/{token}/proposal/{proposal}/mx/autoprocintegration/{0}/xscale/rfactor'.format( [autoProcIntegrationIdList.toString()]));
};


AutoProcIntegrationDataAdapter.prototype.getXScaleISigma= function(autoProcIntegrationIdList){
	return this.getUrl('/{token}/proposal/{proposal}/mx/autoprocintegration/{0}/xscale/isigma'.format( [autoProcIntegrationIdList.toString()]));
};

AutoProcIntegrationDataAdapter.prototype.getXScaleCC2= function(autoProcIntegrationIdList){
	return this.getUrl('/{token}/proposal/{proposal}/mx/autoprocintegration/{0}/xscale/cc2'.format( [autoProcIntegrationIdList.toString()]));
};

AutoProcIntegrationDataAdapter.prototype.getXScaleSigmaAno= function(autoProcIntegrationIdList){
	return this.getUrl( '/{token}/proposal/{proposal}/mx/autoprocintegration/{0}/xscale/sigmaano'.format( [autoProcIntegrationIdList.toString()]));
};

AutoProcIntegrationDataAdapter.prototype.getXScaleWilson= function(autoProcIntegrationIdList){
	return this.getUrl( '/{token}/proposal/{proposal}/mx/autoprocintegration/{0}/xscale/wilson'.format( [autoProcIntegrationIdList.toString()]));
};

AutoProcIntegrationDataAdapter.prototype.getXScaleAnnoCorrection= function(autoProcIntegrationIdList){
	return this.getUrl(connection, '/{token}/proposal/{proposal}/mx/autoprocintegration/{0}/xscale/anomcorr'.format( [autoProcIntegrationIdList.toString()]));
};

AutoProcIntegrationDataAdapter.prototype.getDownloadAttachmentUrl= function(autoProcAttachmentId){
	return this.getUrl('/{token}/proposal/{proposal}/mx/autoproc/autoprocattachmentid/{0}/download'.format( [autoProcAttachmentId.toString()]));
};


AutoProcIntegrationDataAdapter.prototype.getPhasingByAutoprocIds= function(autoProcListId){
	 this.get('/{token}/proposal/{proposal}/mx/phasing/autoprocid/{0}/list'.format( [autoProcListId.toString()]));
};

function CrystalDataAdapter(args){
	DataAdapter.call(this, args);
}

CrystalDataAdapter.prototype.get = DataAdapter.prototype.get;
CrystalDataAdapter.prototype.post = DataAdapter.prototype.post;
CrystalDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

CrystalDataAdapter.prototype.getCrystalsByProposalId= function(){
	 this.get('/{token}/proposal/{proposal}/mx/crystal/list');
};

CrystalDataAdapter.prototype.getCrystalById= function(crystalId){
	 this.get('/{token}/proposal/{proposal}/mx/crystal/{0}/get'.format( [crystalId.toString()]));
};











function DataCollectionDataAdapter(args){
	DataAdapter.call(this, args);
}

DataCollectionDataAdapter.prototype.get = DataAdapter.prototype.get;
DataCollectionDataAdapter.prototype.post = DataAdapter.prototype.post;
DataCollectionDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

DataCollectionDataAdapter.prototype.getBySessionsId= function(sessionsId){
	 this.get('/{token}/proposal/{proposal}/mx/datacollection/session/{0}/list'.format( [sessionsId.toString()]));
};

DataCollectionDataAdapter.prototype.getByDataCollectionId= function(dataColletionIds){
	 this.get('/{token}/proposal/{proposal}/mx/datacollection/{0}/get'.format( [dataColletionIds.toString()]));
};


DataCollectionDataAdapter.prototype.getByAcronymList= function(acronymList){
	 this.get('/{token}/proposal/{proposal}/mx/datacollection/protein_acronym/{0}/view'.format( [acronymList.toString()]));
};

DataCollectionDataAdapter.prototype.getDataCollectionViewBySessionId= function(sessionId){
	 this.get('/{token}/proposal/{proposal}/mx/datacollection/session/{0}/view'.format( [sessionId.toString()]));
};

DataCollectionDataAdapter.prototype.getThumbNailById= function(imageId){
	return this.getUrl('/{token}/proposal/{proposal}/mx/image/{0}/thumbnail'.format([ imageId]));
};

DataCollectionDataAdapter.prototype.getImageById= function(imageId){
	return this.getUrl('/{token}/proposal/{proposal}/mx/image/{0}/get'.format([ imageId]));
};

DataCollectionDataAdapter.prototype.getWilsonPlot= function(dataCollectionId){
	return this.getUrl('/{token}/proposal/{proposal}/mx/datacollection/{0}/wilson'.format([ dataCollectionId]));
};


DataCollectionDataAdapter.prototype.getCrystalSnapshotByDataCollectionId= function(dataCollectionId, id){
	return this.getUrl('/{token}/proposal/{proposal}/mx/datacollection/{0}/crystalsnaphot/{1}/get'.format([ dataCollectionId, id]));
};










function MxDataAdapterFactory(args){
	this.proposal = new ProposalDataAdapterGroup(args);
	this.mx = new MxDataAdapterGroup(args);
	this.saxs = new SaxsDataAdapterGroup(args);
	this.exi = new ExiDataAdapterGroup(args);
}















































function MxDataAdapterGroup(args){
	this.autoProcIntegrationDataAdapter = new AutoProcIntegrationDataAdapter(args);
	this.dataCollection = new DataCollectionDataAdapter(args);
	this.crystal = new CrystalDataAdapter(args);
	this.protein = new ProteinDataAdapter(args);
	this.workflowStepDataAdapter = new WorkflowStepDataAdapter(args);
}



function ProteinDataAdapter(args){
	DataAdapter.call(this, args);
}

ProteinDataAdapter.prototype.get = DataAdapter.prototype.get;
ProteinDataAdapter.prototype.post = DataAdapter.prototype.post;
ProteinDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

ProteinDataAdapter.prototype.getProteinByProposalId= function(){
	 this.get('/{token}/proposal/{proposal}/mx/protein/list');
};










function WorkflowStepDataAdapter(args){
	DataAdapter.call(this, args);
}

WorkflowStepDataAdapter.prototype.get = DataAdapter.prototype.get;
WorkflowStepDataAdapter.prototype.post = DataAdapter.prototype.post;
WorkflowStepDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

WorkflowStepDataAdapter.prototype.getImageByWorkflowStepId = function(workflowStepId){
	 return this.getUrl('/{token}/proposal/{proposal}/mx/workflow/step/{0}/image'.format( [workflowStepId.toString()]));
};

WorkflowStepDataAdapter.prototype.getHtmlByWorkflowStepId = function(workflowStepId){
	 return this.getUrl('/{token}/proposal/{proposal}/mx/workflow/step/{0}/html'.format( [workflowStepId.toString()]));
};

WorkflowStepDataAdapter.prototype.getResultByWorkflowStepId = function(workflowStepId){
	 return this.getUrl('/{token}/proposal/{proposal}/mx/workflow/step/{0}/result'.format( [workflowStepId.toString()]));
};

WorkflowStepDataAdapter.prototype.getWorkflowstepByIdList = function(workflowStepIds){
	 this.get('/{token}/proposal/{proposal}/mx/workflow/step/{0}/list'.format( [workflowStepIds.toString()]));
};











function AuthenticationDataAdapter(args){
	DataAdapter.call(this, args);
}

AuthenticationDataAdapter.prototype.get = DataAdapter.prototype.get;
AuthenticationDataAdapter.prototype.post = DataAdapter.prototype.post;
AuthenticationDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;


AuthenticationDataAdapter.prototype.authenticate = function(user, password, url){
	var _this = this;
	
	var site = "ESRF";
	/** SITE **/
	if (url.indexOf("embl-hamburg") != -1){
		site = "EMBL";
	}
	if (url.indexOf("192.109.31.39") != -1){
		site = "EMBL";
	}
	var url = '/authenticate?site=' + site;
	this.post(url, {
			  		login : user,
			  		password : password
	});
	/*$.ajax({
		  url: url + '/authenticate?site=' + site,
		  type: 'post',
		  data: {
			  		login : user,
			  		password : password
		  },
		  success: function(data){
			   _this.onSuccess.notify(data);
		  },
		  error: function(error){
			  _this.onError.notify(error);
		  }
	});*/
};

function DataAdapterFactory(args){
	this.proposal = new ProposalDataAdapterGroup(args);
}

function DewarDataAdapter(args){
	DataAdapter.call(this, args);
}

DewarDataAdapter.prototype.get = DataAdapter.prototype.get;
DewarDataAdapter.prototype.post = DataAdapter.prototype.post;
DewarDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

DewarDataAdapter.prototype.saveDewar= function(shippingId, dewar){
    var url = ('/{token}/proposal/{proposal}/shipping/{0}/dewar/save'.format( [shippingId]));
	this.post(url, dewar);
};

DewarDataAdapter.prototype.removeDewar= function(shippingId, dewarId){
	var url = ('/{token}/proposal/{proposal}/shipping/{0}/dewar/{1}/remove'.format( [shippingId, dewarId]));
	this.get(url);
};

DewarDataAdapter.prototype.addDewar= function(shippingId){
   this.saveDewar(shippingId, {});
};


function ProposalDataAdapter(args){
	DataAdapter.call(this, args);
}

ProposalDataAdapter.prototype.get = DataAdapter.prototype.get;
ProposalDataAdapter.prototype.post = DataAdapter.prototype.post;
ProposalDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

ProposalDataAdapter.prototype.getProposals= function(){
	this.get('/{token}/proposal/list');
};

ProposalDataAdapter.prototype.getDewarByProposalId= function(){
	this.get('/{token}/proposal/{proposal}/shipping/dewar/list');
};

ProposalDataAdapter.prototype.getProposalsInfo= function(){
	this.get('/{token}/proposal/{proposal}/technique/saxs/get');
};

ProposalDataAdapter.prototype.getProposalBySessionId= function(sessionId){
	this.get('/{token}/proposal/session/{0}/list'.format([sessionId]));
};

ProposalDataAdapter.prototype.update= function(){
	if (EXI != null){
		if (EXI.proposalManager != null){
			this.onSuccess.attach(function(sender, proposals){
				localStorage.setItem("proposals", JSON.stringify(proposals));
			});
			/** This makes that this attach will be executed in first position **/
			this.onSuccess._listeners.reverse();
		}
	}
	this.getProposalsInfo();
};


function ProposalDataAdapterGroup(args){
	this.authentication = new AuthenticationDataAdapter(args);
	this.dewar = new DewarDataAdapter(args);
	this.proposal = new ProposalDataAdapter(args);
	this.shipping = new ShippingDataAdapter(args);
	this.session = new SessionDataAdapter(args);
}
function SessionDataAdapter(args){
	DataAdapter.call(this, args);
}

SessionDataAdapter.prototype.get = DataAdapter.prototype.get;
SessionDataAdapter.prototype.post = DataAdapter.prototype.post;
SessionDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

SessionDataAdapter.prototype.getSessions = function(){
	this.get('/{token}/proposal/{proposal}/session/list');
};




SessionDataAdapter.prototype.getSessionsByDate = function(startDate, endDate){
	this.get('/{token}/proposal/session/list?startdate={0}&enddate={1}'.format([startDate, endDate]));
};

function ShippingDataAdapter(args){
	DataAdapter.call(this, args);
}

ShippingDataAdapter.prototype.get = DataAdapter.prototype.get;
ShippingDataAdapter.prototype.post = DataAdapter.prototype.post;
ShippingDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

ShippingDataAdapter.prototype.getShippings = function(){
	this.get('/{token}/proposal/{proposal}/shipping/list');
};

ShippingDataAdapter.prototype.getShipment = function(shippingId){
	this.get('/{token}/proposal/{proposal}/shipping/{0}/get'.format([shippingId]));
};

ShippingDataAdapter.prototype.getDewarsByShipmentId = function(shippingId){
	this.get('/{token}/proposal/{proposal}/shipping/{0}/dewar/list'.format([shippingId]));
};

ShippingDataAdapter.prototype.getLabContacts = function(){
	this.get('/{token}/proposal/{proposal}/shipping/labcontact/list');
};

ShippingDataAdapter.prototype.getScientists = function(){
	this.get('/{token}/proposal/{proposal}/shipping/labcontact/smis/list');
};

ShippingDataAdapter.prototype.getLabContactById = function(labContactId){
	this.get('/{token}/proposal/{proposal}/shipping/labcontact/{0}/get'.format([labContactId]));
};

ShippingDataAdapter.prototype.saveLabContact = function(labcontact){
    var url = ('/{token}/proposal/{proposal}/shipping/labcontact/save');
	this.post(url, {
		labcontact : JSON.stringify(labcontact)
	});
};

ShippingDataAdapter.prototype.saveShipment = function(shipment ){
	this.post('/{token}/proposal/{proposal}/shipping/save', shipment);
};

ShippingDataAdapter.prototype.addPuck = function(shippingId, dewarId){
	this.get('/{token}/proposal/{proposal}/shipping/{0}/dewar/{1}/puck/add'.format([shippingId, dewarId]));
};

ShippingDataAdapter.prototype.getContainerById = function(shippingId, dewarId, containerId){
	this.get('/{token}/proposal/{proposal}/shipping/{0}/dewar/{1}/puck/{2}/get'.format([shippingId, dewarId, containerId]));
};

ShippingDataAdapter.prototype.removeContainerById = function(shippingId, dewarId, containerId){
	this.get('/{token}/proposal/{proposal}/shipping/{0}/dewar/{1}/puck/{2}/remove'.format([shippingId, dewarId, containerId]));
};

ShippingDataAdapter.prototype.saveContainer = function(shippingId, dewarId, containerId, puck){
    var url = ('/{token}/proposal/{proposal}/shipping/{0}/dewar/{1}/puck/{2}/save'.format([shippingId, dewarId, containerId]));
	this.post(url, {
		puck : JSON.stringify(puck)
	});
};


ShippingDataAdapter.prototype.getDewarLabelURL = function(shippingId, dewarId){
	var connection = EXI.credentialManager.getConnections()[0];
	return this.getUrl(connection, ('/{token}/proposal/{proposal}/shipping/{0}/dewar/{1}/labels'.format([ shippingId, dewarId])));
};



function ProposalManager() {

}

ProposalManager.prototype.get = function(forceUpdate) {
	if ((localStorage.getItem("proposals") == null)||(forceUpdate)){
		var onSuccess= function(sender, proposals){
			localStorage.setItem("proposals", JSON.stringify(proposals));
		};
		EXI.getDataAdapter({async : false, onSuccess : onSuccess}).proposal.proposal.getProposalsInfo();
		
		
	}
	return JSON.parse(localStorage.getItem("proposals"));
};

ProposalManager.prototype.clear = function() {
	localStorage.removeItem('proposals');
};


ProposalManager.prototype.getSessions = function() {
	if (localStorage.getItem("sessions") == null){
		var onSuccess= function(sender, sessions){
			localStorage.setItem("sessions", JSON.stringify(sessions));
		};
		EXI.getDataAdapter({async : false, onSuccess : onSuccess}).proposal.session.getSessions();
	}
	return JSON.parse(localStorage.getItem("sessions"));
};

ProposalManager.prototype.getFutureSessions = function() {
	var sessions = this.getSessions();
	var today = moment();
	var futureSessions = [];
	for (var i = 0; i < sessions.length; i++) {
		if (today.diff(sessions[i].startDate) < 0){
			futureSessions.push(sessions[i]);
		}
	}
	return futureSessions;
};


ProposalManager.prototype.getBufferColors = function() {
	return [ "#ffffcc", "#c7e9b4", "#7fcdbb", "#41b6c4", "#2c7fb8", "#253494" ];
};

ProposalManager.prototype.getLabcontacts = function() {
	var proposals = this.get();
	return proposals[0].labcontacts;
};

ProposalManager.prototype.getLabcontactById = function(labContactId) {
	var labContacts = this.getLabcontacts();
	for (var i = 0; i < labContacts.length; i++) {
		if (labContacts[i].labContactId == labContactId){
			return labContacts[i];
		}
	}
};

ProposalManager.prototype.getPlateTypeById = function(plateTypeId) {
	var types = this.getPlateTypes();
	for (var i = 0; i < types.length; i++) {
		if (types[i].plateTypeId == plateTypeId) {
			return types[i];
		}
	}
	return null;
};

ProposalManager.prototype.getPlateTypes = function() {
	var proposals = this.get();
	/** TODO: This depends on proposal **/
	return proposals[0].plateTypes;

};

ProposalManager.prototype.getPlateByFlavour = function() {
	var plateTypes = this.get()[0].plateTypes;
	return [ plateTypes[0], plateTypes[2], plateTypes[3] ];
};

ProposalManager.prototype.getBufferById = function(bufferId) {
	var proposals = this.get();
	for (var i = 0; i < proposals.length; i++) {
		for (var j = 0; j < proposals[i].buffers.length; j++) {
			if (proposals[i].buffers[j].bufferId == bufferId) {
				return proposals[i].buffers[j];
			}
		}
	}
};

ProposalManager.prototype.getMacromoleculeById = function(macromoleculeId) {
	var proposals = this.get();
	for (var i = 0; i < proposals.length; i++) {
		for (var j = 0; j < proposals[i].macromolecules.length; j++) {
			if (proposals[i].macromolecules[j].macromoleculeId == macromoleculeId) {
				return proposals[i].macromolecules[j];
			}
		}
	}
};

ProposalManager.prototype.getMacromoleculeByAcronym = function(acronym) {
	var proposals = this.get();
	for (var i = 0; i < proposals.length; i++) {
		for (var j = 0; j < proposals[i].macromolecules.length; j++) {
			if (proposals[i].macromolecules[j].acronym == acronym) {
				return proposals[i].macromolecules[j];
			}
		}
	}
};

ProposalManager.prototype.getStockSolutionById = function(stockSolutionId) {
	var proposals = this.get();
	for (var i = 0; i < proposals.length; i++) {
		for (var j = 0; j < proposals[i].stockSolutions.length; j++) {
			if (proposals[i].stockSolutions[j].stockSolutionId == stockSolutionId) {
				return proposals[i].stockSolutions[j];
			}
		}
	}
};

ProposalManager.prototype.getBuffers = function() {
	var proposals = this.get();
	var buffers = [];
	for (var i = 0; i < proposals.length; i++) {
		buffers = buffers.concat(proposals[i].buffers);
	}
	return buffers;
};

ProposalManager.prototype.getMacromolecules = function() {
	var proposals = this.get();
	var macromolecules = [];
	for (var i = 0; i < proposals.length; i++) {
		macromolecules = macromolecules.concat(proposals[i].macromolecules);
	}
	return macromolecules;
};

ProposalManager.prototype.getProposals = function() {
	var proposals = this.get();
	var result = [];
	for (var i = 0; i < proposals.length; i++) {
		proposals[i].proposal[0]["proposal"] = proposals[i].proposal[0].code + proposals[i].proposal[0].number;
		result = result.concat(proposals[i].proposal);
	}
	return result;
};

ProposalManager.prototype.getProposalById = function(proposalId) {
	var proposals = this.get();
	var result = [];
	for (var i = 0; i < proposals.length; i++) {
		if (proposals[i].proposal[0].proposalId == proposalId){
			return proposals[i].proposal[0];
		}
	}
	return result;
};

ProposalManager.prototype.getStockSolutions = function() {
	return this.get()[0].stockSolutions;
};

ProposalManager.prototype.getProteins = function() {
	return this.get()[0].proteins;
};

ProposalManager.prototype.getCrystals = function() {
	return this.get()[0].crystals;
};

ProposalManager.prototype.getProteinByAcronym = function(acronym) {
	var proteins = this.getProteins();
	for (var i = 0; i < proteins.length; i++) {
		if (proteins[i].acronym == acronym){
			return proteins[i];
		}
	}
	return null;
};

ProposalManager.prototype.getCrystalsByAcronym = function(acronym) {
	var crystals = this.getCrystals();
	var result = [];
		for (var i = 0; i < crystals.length; i++) {
			if (crystals[i].protein.acronym == acronym){
				result = result.concat(crystals[i]);
			}
	}
	return result;
};

ProposalManager.prototype.getStockSolutionsBySpecimen = function(macromoleculeId, bufferId) {
	var result = [];
	var stockSolutions = this.getStockSolutions();
	for (var i = 0; i < stockSolutions.length; i++) {
		if (stockSolutions[i].macromoleculeId == macromoleculeId) {
			if (stockSolutions[i].bufferId == bufferId) {
				result.push(stockSolutions[i]);
			}
		}
	}
	return result;
};

ProposalManager.prototype.getUnpackedStockSolutions = function() {
	var stockSolutions = this.getStockSolutions();
	var result = [];
	for (var i = 0; i < stockSolutions.length; i++) {
		if (stockSolutions[i].boxId == null) {
			result.push(stockSolutions[i]);
		}
	}
	return result;
};

ProposalManager.prototype.getStockSolutionsByDewarId = function(dewarId) {
	var stockSolutions = this.getStockSolutions();
	var result = [];
	for (var i = 0; i < stockSolutions.length; i++) {
		if (stockSolutions[i].boxId == dewarId) {
			result.push(stockSolutions[i]);
		}
	}
	return result;
};

function BufferSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

BufferSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
BufferSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
BufferSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

BufferSaxsDataAdapter.prototype.getBuffers= function(){
	this.get('/{token}/proposal/{proposal}/saxs/buffer/list');
};

BufferSaxsDataAdapter.prototype.saveBuffer= function(buffer){
    var url = ('/{token}/proposal/{proposal}/saxs/buffer/save');
	this.post(url, {buffer : JSON.stringify(buffer)});
};
function DataCollectionSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

DataCollectionSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
DataCollectionSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
DataCollectionSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

DataCollectionSaxsDataAdapter.prototype.getDataCollectionsByMacromoleculeAcronym= function(macromoleculeAcronym){
	this.get('/{token}/proposal/{proposal}/saxs/datacollection/macromoleculeAcronym/{0}/list'.format( [ macromoleculeAcronym]));
};

DataCollectionSaxsDataAdapter.prototype.getDataCollectionsByKey= function(key, value){
	this.get('/{token}/proposal/{proposal}/saxs/datacollection/{0}/{1}/list'.format( [ key, value.toString()]));
};

DataCollectionSaxsDataAdapter.prototype.getDataCollectionsByDataCollectionId= function(dataCollectionIds){
	this.get('/{token}/proposal/{proposal}/saxs/datacollection/dataCollectionId/{0}/list'.format( [ dataCollectionIds]));
};

DataCollectionSaxsDataAdapter.prototype.getDataCollectionsByIdList= function(dataCollectionIds){
	this.get('/{token}/proposal/{proposal}/saxs/datacollection/{0}/list'.format( [ dataCollectionIds]));
};

DataCollectionSaxsDataAdapter.prototype.getDataCollectionsByExperimentId= function(experimentId){
	this.get('/{token}/proposal/{proposal}/saxs/datacollection/experimentId/{0}/list'.format( [ experimentId]));
};



/**
 * 
 * This class represents an data Acquisition
 * 
 * @json a json with the serialization of Experiment3VO
 * 
 */
function Experiment(json) {
	this.json = json;
	this.onSaved = new Event(this);
	this.onError = new Event(this);

	this.name = json.name;
	this.experimentId = json.experimentId;
	this.creationDate = json.creationDate;

	/** For all specimens asynchronous **/
	this.onPlateSaved = new Event(this);

	this.bufferColors =  $.extend({}, EXI.proposalManager.getBufferColors());
	
	this.specimenBuffersColors = this.getSpecimenColors();
	
	for ( var bufferId in this.bufferColors) {
		this.bufferColors[bufferId] = 'black';
	}
	this.setMacromoleculesColors();
}

Experiment.prototype.getSpecimenColorByBufferId = function(specimenId) {
	return this.specimenBuffersColors[specimenId];
};

Experiment.prototype.setMacromoleculesColors = function (){
	var colors = [
					"#66c2a5",
					"#fc8d62",
					"#8da0cb",
					"#e78ac3",
					"#a6d854",
					"#ffd92f",
					"#e5c494"];
	
	
	this.macromoleculeColors = {};
	var macromolecules = this.getMacromolecules();
	for (var i = 0; i < macromolecules.length; i++) {
		this.macromoleculeColors[macromolecules[i].macromoleculeId] = colors[i%colors.length];
	}
};

Experiment.prototype.getHPLCMacromolecule = function() {
	var dcs = this.getDataCollections();
	if (dcs.length >  0){
		for ( var i = 0; i < 1; i++) {
			var meToDc = dcs[i].measurementtodatacollection3VOs;
			if (meToDc != null){
				for ( var j = 0; j < meToDc.length; j++) {
					if (meToDc[j].dataCollectionOrder == 2){
						return this.getSampleById(this.getMeasurementById(meToDc[j].measurementId).specimenId).macromolecule3VO;
					}
				}
			}
		}
	}
};

/**
 * If ((specimen1.specimenId <> specimen2.specimenId)&&(specimen1.bufferId == specimen2.bufferId)) then specimen1.color < specimen2.color
 */
Experiment.prototype.getSpecimenColors = function() {
	var specimens = this.getSamples();
	var bufferSamples = [];

	for ( var i = 0; i < specimens.length; i++) {
		if (specimens[i].macromolecule3VO === null) {
			bufferSamples.push(specimens[i]);
		}
	}

	var colors = {};
	var buffercolors =  EXI.proposalManager.getBufferColors();
	for ( i = 0; i < bufferSamples.length; i++) {
		colors[bufferSamples[i].specimenId] = buffercolors[i % buffercolors.length];
	}
	return colors;
};

Experiment.prototype.getBuffers = function() {
	var samples = this.getSamples();
	var bufferHash = {};
	var buffers = [];
	if (samples !== null) {
		for ( var i = 0; i < samples.length; i++) {
			if (bufferHash[samples[i].bufferId] === null) {
				buffers.push(BIOSAXS.proposal.getBufferById(samples[i].bufferId));
				bufferHash[samples[i].bufferId] = true;
			}
		}
	}
	return buffers;
};

/** BUFFER **/
Experiment.prototype.getBufferById = function(bufferId) {
	return  EXI.proposalManager.getBufferById(bufferId);
};

/** STOCK SOLUTION **/
Experiment.prototype.getStockSolutions = function() {
	return this.json.stockSolution3VOs;
};

Experiment.prototype.getStockSolutionById = function(stockSolutionId) {
	var stockSolutions = this.getStockSolutions();
	for ( var i = 0; i < stockSolutions.length; i++) {
		if (stockSolutions[i].stockSolutionId == stockSolutionId) {
			return stockSolutions[i];
		}
	}
};

/** This method gets all the macromolecules of the Experiment **/
Experiment.prototype.getMacromolecules = function() {
	var specimens = this.getSamples();
	var macromoleculeIds = {};
	
	var macromolecules = [];
	for (var i = 0; i < specimens.length; i++) {
		if (specimens[i].macromolecule3VO != null){
			if (macromoleculeIds[specimens[i].macromolecule3VO.macromoleculeId] == null){
				macromolecules.push(specimens[i].macromolecule3VO);
				macromoleculeIds[specimens[i].macromolecule3VO.macromoleculeId] = true;
			}
		}
	}
	return macromolecules;
};

/** Return an array with all the specimens collected, it means, where run3VO is not null **/
Experiment.prototype.getMeasurementsWithSubtractionAssociated = function() {
	var specimens = this.getMeasurements();
	var specimenCollected = [];
	for ( var i = 0; i < specimens.length; i++) {
		var specimen = specimens[i];
		if (specimen.run3VO !== null) {
			specimenCollected.push(specimen);
		}
	}
	return specimenCollected;
};

Experiment.prototype.getSamples = function() {
	return this.json.samples3VOs;
};

/** Deprecated changed to getSpecimenById **/
Experiment.prototype.getSampleById = function(specimenId) {
	return this.getSpecimenById(specimenId);
};

Experiment.prototype.getSpecimenById = function(specimenId) {
	var samples = this.getSamples();
	for ( var i = 0; i < samples.length; i++) {
		if (samples[i].specimenId == specimenId) {
			return samples[i];
		}
	}
	return null;
};

Experiment.prototype.getSpecimenByDataCollectionId = function(dataCollectionId) {
	var dataCollection = this.getDataCollectionById(dataCollectionId);
	var measurementHash = {};
	var results = [];
	for ( var j = 0; j < dataCollection.measurementtodatacollection3VOs.length; j++) {
		var measurement = this.getMeasurementById(dataCollection.measurementtodatacollection3VOs[j].measurementId);
		if (measurementHash[measurement.specimenId] == null) {
			results.push(measurement);
			measurementHash[measurement.specimenId] = true;
		}
	}
	return results;
};

Experiment.prototype.setSpecimenById = function(specimen) {
	for ( var i = 0; i < this.json.samples3VOs.length; i++) {
		if (this.json.samples3VOs[i].specimenId == specimen.specimenId) {
			this.json.samples3VOs[i] = specimen;
			return;
		}
	}
	console.log("Specimen with id: " + specimen.specimenId + " not found");
};

Experiment.prototype.setMeasurement = function(measurement) {
	var measurements = this.getMeasurements();
	for ( var i = 0; i < measurements.length; i++) {
		if (measurements[i].measurementId == measurement.measurementId) {
			measurements[i] = measurement;
			return;
		}
	}
};

Experiment.prototype.getConcentrations = function() {
	var concentrations = {};
	var specimens = this.getMeasurements();
	for ( var i = 0; i < specimens.length; i++) {
		if (specimens[i].concentration != null) {
			concentrations[specimens[i].concentration] = [ specimens[i].concentration ];
		}
	}
	var concValues = [];
	for ( var conc in concentrations) {
		if (conc != "null") {
			concValues.push(conc);
		}

	}
	return concValues;
};

Experiment.prototype.getConcentrationsBysample = function(sample) {
	var concentrations = {};
	var samples = this.getSamples();
	for ( var i = 0; i < samples.length; i++) {
		if (samples[i].macromolecule3VO != null) {
			if (samples[i].macromolecule3VO.macromoleculeId == sample.macromolecule3VO.macromoleculeId) {
				if (samples[i].concentration != null) {
					concentrations[samples[i].concentration] = [ samples[i].concentration ];
				}
			}
		}
	}
	var concValues = [];
	for ( var conc in concentrations) {
		if (conc != "null") {
			concValues.push(conc);
		}

	}
	return concValues;
};

Experiment.prototype.setSpecimen = function(specimen) {
	var buffers = this.getBuffers();
	for ( var i = 0; i < buffers.length; i++) {
		var buffer = buffers[i];
		for ( var j = 0; j < buffer.specimen3VOs.length; j++) {
			var specimen3vo = buffer.specimen3VOs[j];
			if (specimen3vo.specimenId == specimen.specimenId) {
				buffer.specimen3VOs[j] = specimen;
				return buffer;
			}
		}
	}
};

/** SAMPLE PLATES **/
Experiment.prototype.getSamplePlates = function() {
	return this.json.samplePlate3VOs;
};

Experiment.prototype.getSamplePlateById = function(samplePlateId) {
	var plates = this.getSamplePlates();
	for ( var i = 0; i < plates.length; i++) {
		if (plates[i].samplePlateId == samplePlateId) {
			return plates[i];
		}
	}
};

Experiment.prototype.getSamplePlateBySlotPositionColumn = function(slotPositionColumn) {
	var plates = this.getSamplePlates();
	for ( var i = 0; i < plates.length; i++) {
		if (plates[i].slotPositionColumn == slotPositionColumn) {
			return plates[i];
		}
	}
};

Experiment.prototype.getSpecimenByPosition = function(samplePlateId, rowNumber, columnNumber) {
	return this.getSampleByPosition();
};

Experiment.prototype.getSpecimensBySamplePlateId = function(samplePlateId) {
	var specimens = this.getSamples();
	var result = [];
	for ( var i = 0; i < specimens.length; i++) {
		if (specimens[i].sampleplateposition3VO != null) {
			if (specimens[i].sampleplateposition3VO.samplePlateId == samplePlateId) {
				result.push(specimens[i]);
			}
		}
	}
	return result;
};

Experiment.prototype.getSampleByPosition = function(samplePlateId, rowNumber, columnNumber) {
	var specimens = this.getSamples();
	var result = [];
	for ( var i = 0; i < specimens.length; i++) {
		if (specimens[i].sampleplateposition3VO != null) {
			if ((specimens[i].sampleplateposition3VO.samplePlateId == samplePlateId) && (specimens[i].sampleplateposition3VO.rowNumber == rowNumber) && (specimens[i].sampleplateposition3VO.columnNumber == columnNumber)) {
				result.push(specimens[i]);
			}
		}
	}
	return result;
};

Experiment.prototype.getPlateGroups = function() {
	var plates = this.getSamplePlates();
	var plateGroups = [];
	var keys = {};
	for ( var i = 0; i < plates.length; i++) {
		if (plates[i].plategroup3VO != null) {
			var id = plates[i].plategroup3VO.plateGroupId;
			if (keys[id] == null) {
				plateGroups.push(plates[i].plategroup3VO);
				keys[id] = true;
			}
		}
	}
	return plateGroups;
};

Experiment.prototype.getPlatesByPlateGroupId = function(plateGroupId) {
	var plates = this.getSamplePlates();
	var result = [];
	for ( var i = 0; i < plates.length; i++) {
		if (plates[i].plategroup3VO != null) {
			if (plates[i].plategroup3VO.plateGroupId == plateGroupId) {
				result.push(plates[i]);
			}
		}
	}
	return result;
};

Experiment.prototype.getMeasurements = function() {
	var speciments = [];
	var samples = this.getSamples();
	if (samples == null) {
		return [];
	}
	for ( var i = 0; i < samples.length; i++) {
		var sample = samples[i];
		for ( var j = 0; j < sample.measurements.length; j++) {
			speciments.push(sample.measurements[j]);
		}
	}
	return speciments;
};

Experiment.prototype.getMeasurementById = function(measurementId) {
	var specimens = this.getMeasurements();
	for ( var i = 0; i < specimens.length; i++) {
		if (specimens[i].measurementId == measurementId) {
			return specimens[i];
		}
	}
	return null;
};

Experiment.prototype.getMeasurementByDataCollectionId = function(dataCollectionId) {
	var result = [];
	var dataCollection = this.getDataCollectionById(dataCollectionId);
	for ( var i = 0; i < dataCollection.measurementtodatacollection3VOs.length; i++) {
		result.push(this.getMeasurementById(dataCollection.measurementtodatacollection3VOs[i].measurementId));
	}
	return result;
};

/** Data Collection **/

Experiment.prototype.getDataCollections = function() {
	var dc = this.json.dataCollections;
	var dataCollections = [];
	for ( var i = 0; i < dc.length; i++) {
		if (dc[i].measurementtodatacollection3VOs.length != 0) {
			dataCollections.push(dc[i]);
		}
	}
	return dataCollections;
};

Experiment.prototype.getDataCollectionsBySpecimenId = function(specimenId) {
	var measurements = this.getMeasurementsBySpecimenId(specimenId);
	var result = [];
	var resultHash = {};
	for ( var i = 0; i < measurements.length; i++) {
		var measurement = measurements[i];
		var dcs = this.getDataCollectionByMeasurementId(measurement.measurementId);
		for ( var j = 0; j < dcs.length; j++) {
			if (resultHash[dcs[j].dataCollectionId] == null) {
				resultHash[dcs[j].dataCollectionId] = true;
				result.push(dcs[j]);
			}
		}
	}
	return result;
};

Experiment.prototype.getMeasurementsBySpecimenId = function(specimenId) {
	var measurements = this.getMeasurements();
	var result = [];
	for ( var i = 0; i < measurements.length; i++) {
		if (measurements[i].specimenId == specimenId) {
			result.push(measurements[i]);
		}
	}
	return result;
};

Experiment.prototype.getDataCollectionByMeasurementId = function(measurementId) {
	var dc = this.getDataCollections();
	var result = [];
	
	function localSort(a, b) {
		return a.dataCollectionOrder - b.dataCollectionOrder;
	}
	
	for ( var i = 0; i < dc.length; i++) {
		if (dc[i].measurementtodatacollection3VOs.length != 0) {
			for ( var j = 0; j < dc[i].measurementtodatacollection3VOs.length; j++) {
				var measurement = dc[i].measurementtodatacollection3VOs[j];
				if (measurement.measurementId == measurementId) {
					/** Sorting by dataCollectionOrder **/
					dc[i].measurementtodatacollection3VOs.sort(localSort);
					result.push(dc[i]);
				}
			}
		}
	}
	return result;
};

Experiment.prototype.getSubtractionById = function(subtractionId) {
	var dc = this.getDataCollections();
	for ( var i = 0; i < dc.length; i++) {
		if (dc[i].substraction3VOs != null) {
			if (dc[i].substraction3VOs.length > 0) {
				for ( var j = 0; j < dc[i].substraction3VOs.length; j++) {
					if (dc[i].substraction3VOs[j].subtractionId == subtractionId) {
						return dc[i].substraction3VOs[j];
					}
				}
			}
		}
	}
	return null;
};

Experiment.prototype.getDataCollectionById = function(dataCollectionId) {
	var dc = this.json.dataCollections;
	for ( var i = 0; i < dc.length; i++) {
		if (dc[i].dataCollectionId == dataCollectionId) {
			return dc[i];
		}
	}
};

/** For a specimen calculates the volume to load adding all the volume to load of all the measurements **/
Experiment.prototype.getVolumeToLoadBySampleId = function(specimenId) {
	var sample = this.getSpecimenById(specimenId);
	if (sample != null) {
		var volumeToLoad = 0;
		for ( var i = 0; i < sample.measurements.length; i++) {
			volumeToLoad = volumeToLoad + Number(sample.measurements[i].volumeToLoad);
		}
		return volumeToLoad;
	}
};


function ExperimentList(experiments){
	this.experiments = experiments;
	
	this.macromoleculeColors = {}; 
	
	for (var i = 0; i < experiments.length; i++) {
		this.macromoleculeColors = $.extend({}, this.macromoleculeColors, experiments[i].macromoleculeColors); 
	}
}

ExperimentList.prototype.getSpecimenColorByBufferId = function (bufferId){
	for ( var i = 0; i < this.experiments.length; i++) {
		var experiment = this.experiments[i];
		var color = experiment.getSpecimenColorByBufferId(bufferId);
		if (color != null){
			return color;
		}
	}
	return 'black';
};

ExperimentList.prototype.getColorByMacromoleculeId = function (bufferId){
	for ( var i = 0; i < this.experiments.length; i++) {
		var experiment = this.experiments[i];
		var color = experiment.getColorByMacromoleculeId(bufferId);
		if (color != null){
			return color;
		}
	}
	return 'black';
};


ExperimentList.prototype.getMeasurements = function (){
	var result = [];
	for ( var i = 0; i < this.experiments.length; i++) {
		var experiment = this.experiments[i];
		var measurements = experiment.getMeasurements();
		for ( var j = 0; j < measurements.length; j++) {
			result.push(measurements[j]);
		} 
	} 
	return result;
};

ExperimentList.prototype.getMeasurementByDataCollectionId = function (dataCollectionId){
	for ( var i = 0; i < this.experiments.length; i++) {
		var dataCollection = this.experiments[i].getMeasurementByDataCollectionId(dataCollectionId);
		if (dataCollection.length != 0){
			return dataCollection;
		}
	}
	return [];
};

ExperimentList.prototype.getMergesByMeasurements = function (measurements){
	var merges = [];
	for ( var i = 0; i < measurements.length; i++) {
		if (measurements[i].merge3VOs != null){
			for ( var j = 0; j < measurements[i].merge3VOs.length; j++) {
				merges.push(measurements[i].merge3VOs[j]);
			}
		}
	}
	return merges;
};

ExperimentList.prototype.getSamplePlateById = function (samplePlateId){
	for ( var i = 0; i < this.experiments.length; i++) {
		var samplePlate = this.experiments[i].getSamplePlateById(samplePlateId);
		if (samplePlate != null){
			return samplePlate;
		}
	}
	return null;
};

ExperimentList.prototype.getMergesByDataCollectionId = function (dataCollectionId){
	return this.getMergesByMeasurements(this.getMeasurementByDataCollectionId(dataCollectionId));
};

ExperimentList.prototype.getMerges = function (){
	return this.getMergesByMeasurements(this.getMeasurements());
};

ExperimentList.prototype.getDataCollectionById = function (dataCollectionId){
	var result = [];
	for ( var i = 0; i < this.experiments.length; i++) {
		var experiment = this.experiments[i];
		var dc = experiment.getDataCollectionById(dataCollectionId);
		if (dc != null){
			return dc;
		}
	}
	return result;
};

ExperimentList.prototype.getDataCollectionByMeasurementId = function (measurementId){
	for ( var i = 0; i < this.experiments.length; i++) {
		var experiment = this.experiments[i];
		var result = experiment.getDataCollectionByMeasurementId(measurementId);
		if (result != null){
			return result;
		}
	}
	return null;
};


ExperimentList.prototype.getMeasurementsNotCollected = function (){
	var result = [];
	for ( var i = 0; i < this.experiments.length; i++) {
		var experiment = this.experiments[i];
		var measurements = experiment.getMeasurements();
		for ( var j = 0; j < measurements.length; j++) {
			if (measurements[j].run3VO == null){
				result.push(measurements[j]);
			}
		}
	}
	return result;
};

ExperimentList.prototype.getMeasurementsCollected = function (){
	var result = [];
	for ( var i = 0; i < this.experiments.length; i++) {
		var experiment = this.experiments[i];
		var measurements = experiment.getMeasurements();
		for ( var j = 0; j < measurements.length; j++) {
			if (measurements[j].run3VO != null){
				result.push(measurements[j]);
			}
		}
	}
	return result;
};

ExperimentList.prototype.getMeasurementById = function (specimenId){
	for ( var i = 0; i < this.experiments.length; i++) {
		var specimen = this.experiments[i].getMeasurementById(specimenId);
		if (specimen != null){
			return specimen;
		}
	}
	return null;
};

ExperimentList.prototype.getBufferById = function (bufferId){
	for ( var i = 0; i < this.experiments.length; i++) {
		var buffer = this.experiments[i].getBufferById(bufferId);
		if (buffer != null){
			return buffer;
		}
	}
	return null;
};

ExperimentList.prototype.getSampleById = function (sampleId){
	for ( var i = 0; i < this.experiments.length; i++) {
		var sample = this.experiments[i].getSampleById(sampleId);
		if (sample != null){
			return sample;
		}
	}
	return null;
};

ExperimentList.prototype.getSamplesByCondition = function (macromoleculeId, bufferId){
	var result = [];
	for ( var i = 0; i < this.experiments.length; i++) {
		var samples = this.experiments[i].getSamples();
		for ( var j = 0; j < samples.length; j++) {
			if (samples[j].macromolecule3VO != null){
				if (samples[j].macromolecule3VO.macromoleculeId == macromoleculeId){
					if (samples[j].bufferId == bufferId){
						result.push(samples[j]);
					}
				}
			}
		}
	}
	return result;
};

ExperimentList.prototype.getFrames = function (mergesList){
	var frames = [];
	for ( var i = 0; i < mergesList.length; i++) {
		var merge = mergesList[i];
		if (merge.framelist3VO != null){
			if (merge.framelist3VO.frametolist3VOs != null){
				for ( var j = 0; j < merge.framelist3VO.frametolist3VOs.length; j++) {
					var frame = merge.framelist3VO.frametolist3VOs[j].frame3VO;
					if (frame!= null){
						frames.push(frame);
					}
				}
			}
		}
	}
	return frames;
};

function ExperimentSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

ExperimentSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
ExperimentSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
ExperimentSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

ExperimentSaxsDataAdapter.prototype.getByExperimentByKey= function(key, value){
	this.get('/{token}/proposal/{proposal}/saxs/experiment/{0}/{1}/list'.format( [key.toString(), value.toString()]));
};

ExperimentSaxsDataAdapter.prototype.getExperiments= function(){
	this.get('/{token}/proposal/{proposal}/saxs/experiment/list');
};

ExperimentSaxsDataAdapter.prototype.getExperimentById= function(experimentId){
	this.get('/{token}/proposal/{proposal}/saxs/experiment/{0}/get'.format( [experimentId]));
};

ExperimentSaxsDataAdapter.prototype.getExperimentsBySessionId= function(sessionId){
	this.get('/{token}/proposal/{proposal}/saxs/experiment/session/{0}/list'.format( [ sessionId]));
};

ExperimentSaxsDataAdapter.prototype.getByExperimentId= function(experimentIds){
	this.get('/{token}/proposal/{proposal}/saxs/experiment/experimentId/{0}/list'.format( [ experimentIds]));
};

ExperimentSaxsDataAdapter.prototype.saveExperiment = function(experimentId, name, comments ){
    var url = ('/{token}/proposal/{proposal}/saxs/experiment/{0}/save'.format([experimentId]));
	this.post(url, {
						name : name,
						comments : comments
	});
};
function FrameSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

FrameSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
FrameSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
FrameSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

FrameSaxsDataAdapter.prototype.getFramesByAverageId= function(averageId){
	this.get('/{0}/saxs/{1}/frame/average/{0}/list'.format( [averageId.toString()]));
};

FrameSaxsDataAdapter.prototype.getFramesURL = function(frames, averages, subtractions,sampleaverages, bufferaverages, models){
	if (frames == null){
		frames = [];
	}
	if (averages == null){
		averages = [];
	}
	if (subtractions == null){
		subtractions = [];
	}
	if (sampleaverages == null){
		sampleaverages = [];
	}
	if (bufferaverages == null){
		bufferaverages = [];
	}
	
	if (models == null){
		models = [];
	}
	
	var connection = EXI.credentialManager.getConnections()[0];
	return connection.url + ('/{0}/proposal/{1}/saxs/frame/datplot?frame={2}&average={3}&subtracted={4}&sampleaverage={5}&bufferaverage={6}&models={7}'.format([ connection.token,connection.user, frames.toString(), averages.toString(),subtractions.toString(), sampleaverages.toString(), bufferaverages.toString(), models.toString() ]));
};

function HPLCSaxsDataAdapter(args){
	 DataAdapter.call(this, args);
}

HPLCSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
HPLCSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
HPLCSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

HPLCSaxsDataAdapter.prototype.getHPLCOverviewByExperimentId= function(experimentId){
	this.get('/{token}/proposal/{proposal}/saxs/experiment/{0}/hplc/overview'.format( [experimentId]));
};

HPLCSaxsDataAdapter.prototype.getHPLCFramesScatteringURL= function(experimentId, frameIdList){
	var connection = EXI.credentialManager.getConnections()[0];
	return this.getUrl(connection, ('/{token}/proposal/{proposal}/saxs/experiment/{0}/hplc/frame/{1}/get?operation=log'.format( [experimentId, frameIdList.toString()])));
};

function MacromoleculeSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

MacromoleculeSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
MacromoleculeSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
MacromoleculeSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

MacromoleculeSaxsDataAdapter.prototype.saveMacromolecule = function(macromolecule){
    	var url = ('/{token}/proposal/{proposal}/saxs/macromolecule/save');
	this.post(url, {macromolecule : JSON.stringify(macromolecule)});
};

MacromoleculeSaxsDataAdapter.prototype.getMacromolecules= function(){
	this.get('/{token}/proposal/{proposal}/saxs/macromolecule/list');
};


MacromoleculeSaxsDataAdapter.prototype.getContactDescriptionUploadFileURL= function(macromoleculeId){
	return this.getUrl('/{token}/proposal/{proposal}/saxs/macromolecule/{0}/contactfile/upload'.format([macromoleculeId]));
};

MacromoleculeSaxsDataAdapter.prototype.removeContactDescriptionFile= function(macromoleculeId){
	this.get('/{token}/proposal/{proposal}/saxs/macromolecule/{0}/contactfile/remove'.format([macromoleculeId]));
};


MacromoleculeSaxsDataAdapter.prototype.getAddPDBURL= function(macromoleculeId){
	return this.getUrl('/{token}/proposal/{proposal}/saxs/macromolecule/{0}/pdb/upload'.format([macromoleculeId]));
};

MacromoleculeSaxsDataAdapter.prototype.removeStructure= function(macromoleculeId, structureId){
	this.get('/{token}/proposal/{proposal}/saxs/macromolecule/{0}/pdb/{1}/remove'.format([macromoleculeId, structureId]));
};

MacromoleculeSaxsDataAdapter.prototype.saveStructure= function(macromoleculeId, structureId,  multiplicity, symmetry){
	var url = ('/{token}/proposal/{proposal}/saxs/macromolecule/{0}/pdb/{1}/save'.format([macromoleculeId, structureId]));
	this.post(url, {
						symmetry : symmetry,
						multiplicity : multiplicity
	});
		
};

function MeasurementSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

MeasurementSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
MeasurementSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
MeasurementSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

MeasurementSaxsDataAdapter.prototype.saveMeasurement= function(measurement){
    var url = ('/{token}/proposal/{proposal}/saxs/measurement/save');
	this.post(url, {measurement : JSON.stringify(measurement)});
};

MeasurementSaxsDataAdapter.prototype.removeMeasurement= function(measurement){
    var url = ('/{token}/proposal/{proposal}/saxs/measurement/{0}/remove'.format([measurement.measurementId]));
	this.get(url);
};

MeasurementSaxsDataAdapter.prototype.sortMeasurements= function(experimentId, type){
    this.get('/{token}/proposal/{proposal}/saxs/measurement/experiment/{0}/type/{1}/sort'.format( [experimentId, type]));
};
function ModelSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

ModelSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
ModelSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
ModelSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

ModelSaxsDataAdapter.prototype.saveMeasurement= function(measurement){
    var url = ('/{token}/proposal/{proposal}/saxs/measurement/save');
    this.post(url, {measurement : JSON.stringify(measurement)});
};

ModelSaxsDataAdapter.prototype.removeMeasurement= function(measurement){
    var url = ('/{token}/proposal/{proposal}/saxs/measurement/{0}/remove'.format([measurement.measurementId]));
    this.get(url);
};

ModelSaxsDataAdapter.prototype.getPDB= function(models, superpositions){
    var url = ('/{token}/proposal/{proposal}/saxs/modeling/pdb/get');
    this.post(url, {models : JSON.stringify(models)});

};
function SaxsDataAdapterFactory(args){
	this.proposal = new ProposalDataAdapterGroup(args);
	this.mx = new MxDataAdapterGroup(args);
	this.saxs = new SaxsDataAdapterGroup(args);
	this.exi = new ExiDataAdapterGroup(args);
}















































function SaxsDataAdapterGroup(args){
	this.experiment = new ExperimentSaxsDataAdapter(args);
	this.buffer = new BufferSaxsDataAdapter(args);
	this.macromolecule= new MacromoleculeSaxsDataAdapter(args);
	this.hplc = new HPLCSaxsDataAdapter(args);
	this.measurement = new MeasurementSaxsDataAdapter(args);
	this.specimen = new SpecimenSaxsDataAdapter(args);
	this.stockSolution = new StockSolutionSaxsDataAdapter(args);
	this.subtraction = new SubtractionSaxsDataAdapter(args);
	this.dataCollection = new DataCollectionSaxsDataAdapter(args);
	this.template = new TemplateSaxsDataAdapter(args);
	this.frame = new FrameSaxsDataAdapter(args);
	this.model = new ModelSaxsDataAdapter(args);
}



function SpecimenSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

SpecimenSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
SpecimenSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
SpecimenSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

SpecimenSaxsDataAdapter.prototype.saveSpecimen= function(specimen){
    var url = ('/{token}/proposal/{proposal}/saxs/specimen/save');
	this.post(url, {specimen : JSON.stringify(specimen)});
};

SpecimenSaxsDataAdapter.prototype.mergeSpecimens= function(sourceSpecimenId, targetSpecimenId){
    var url = ('/{token}/proposal/{proposal}/saxs/specimen/merge');
	this.post(url, {sourceSpecimenId : sourceSpecimenId, targetSpecimenId : targetSpecimenId });
};
function StockSolutionSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

StockSolutionSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
StockSolutionSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
StockSolutionSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

StockSolutionSaxsDataAdapter.prototype.getStockSolutions= function(){
	this.get('/{token}/proposal/{proposal}/saxs/stocksolution/list');
};

StockSolutionSaxsDataAdapter.prototype.saveStockSolution= function(stocksolution){
    var url = ('/{token}/proposal/{proposal}/saxs/stocksolution/save');
	this.post(url, {stocksolution : JSON.stringify(stocksolution)});
};
function SubtractionSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

SubtractionSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
SubtractionSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
SubtractionSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

SubtractionSaxsDataAdapter.prototype.getSubtractionsBySubtractionIdList= function(subtractionIdList){
	this.get('/{token}/proposal/{proposal}/saxs/subtraction/{0}/list'.format( [subtractionIdList.toString()]));
};

SubtractionSaxsDataAdapter.prototype.getImage = function(subtractionId, imageType){
	return this.getUrl('/{token}/proposal/{proposal}/saxs/subtraction/{0}/image/{1}'.format([ subtractionId, imageType]));
};

SubtractionSaxsDataAdapter.prototype.getZip = function(subtractionId){
	return this.getUrl('/{token}/proposal/{proposal}/saxs/subtraction/{0}/zip'.format([ subtractionId]));
};

function TemplateSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

TemplateSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
TemplateSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
TemplateSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;


TemplateSaxsDataAdapter.prototype.getTemplateSourceFile = function(experimentId, type){
	return this.getUrl('/{token}/proposal/{proposal}/saxs/experiment/{0}/samplechanger/type/{1}/template'.format([  experimentId, type]));
};


TemplateSaxsDataAdapter.prototype.saveTemplate = function(name, comments, measurements, experimentId ){
    var url = ('/{token}/proposal/{proposal}/saxs/experiment/save');
	this.post(url, {name : name,
					comments : comments,
					experimentId : experimentId,
					measurements : measurements.toString()
	});
};

